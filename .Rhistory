accuracy(model1)
summary(model2)
accuracy(model2)
#NYSE
plot(forecast(model1$fitted, h=12), main = "12-Step Forecast of NYSE Return", ylab = "NYSE Return", xlab = "Year") # Overall looking at a glance
plot(forecast(model1$fitted, h=12), xlim=c(2018, 2020), main = "12-Step Forecast of NYSE Return", ylab = "NYSE Return", xlab = "Year") # A closer look
#IBM
plot(forecast(model2$fitted, h=12), main = "12-Step Forecast of IBM Return", ylab = "IBM Return", xlab = "Year") # Overall looking at a glance
plot(forecast(model2$fitted , h=12), xlim=c(2018, 2020), main = "12-Step Forecast of IBM Return", ylab = "IBM Return", xlab = "Year")
# NYSE
NYSE_arima <- auto.arima(nyse_return)
# Generate ETS model
NYSE_ets <- ets(nyse_return)
# Generate Holt-Winters model
NYSE_hw <- hw(nyse_return)
# Forecast every model 12 steps ahead
nyse_arima_fcast <- NYSE_arima %>% forecast(12)
nyse_ets_fcast <- NYSE_ets %>% forecast(12)
nyse_hw_fcast <- NYSE_hw %>% forecast(12)
nyse_own_fcast <- model1$fitted %>% forecast(12)
library(forecast)
# Output a table of MAPE values and the respective model
accuracy(nyse_arima_fcast, nyse.return)
accuracy(nyse_ets_fcast, nyse.return)
accuracy(nyse_hw_fcast, nyse.return)
accuracy(nyse_own_fcast, nyse.return)
# Generate ARIMA model automatically
IBM_arima <- auto.arima(ibm_return)
# Generate ets model
IBM_ets <- ets(ibm_return)
# Generate Holt-Winters model
IBM_hw <- hw(ibm_return)
# Forecast every model 12 steps ahead
ibm_arima_fcast <- IBM_arima %>% forecast(12)
ibm_ets_fcast <- IBM_ets %>% forecast(12)
ibm_hw_fcast <- IBM_hw %>% forecast(12)
ibm_own_fcast <- model2$fitted %>% forecast(12)
accuracy(ibm_arima_fcast, ibm.return)
accuracy(ibm_ets_fcast, ibm.return)
accuracy(ibm_hw_fcast, ibm.return)
accuracy(ibm_own_fcast, ibm.return)
combination.nyse <- (nyse_ets_fcast[["mean"]]+ nyse_arima_fcast[["mean"]]+ nyse_hw_fcast[["mean"]]+ nyse_own_fcast[["mean"]]) / 4
library(ggplot2)
autoplot(nyse.return) +
autolayer(nyse_ets_fcast, series="ETS", PI=FALSE) + autolayer(nyse_arima_fcast, series="ARIMA", PI=FALSE) + autolayer(nyse_hw_fcast, series="HW", PI=FALSE) + autolayer(nyse_own_fcast, series="own model", PI=FALSE) + autolayer(combination.nyse, series="Combination") + xlab("Year") + ylab("price") + ggtitle("NYSE")
c(ETS = accuracy(nyse_ets_fcast, nyse.return)["Test set","MAPE"], ARIMA = accuracy(nyse_arima_fcast, nyse.return)["Test set","MAPE"], HW = accuracy(nyse_hw_fcast, nyse.return)["Test set","MAPE"],   Combination =  accuracy(combination.nyse,  nyse.return)["Test set","MAPE"])
combination.ibm <- (ibm_ets_fcast[["mean"]]+ ibm_arima_fcast[["mean"]]+ ibm_hw_fcast[["mean"]]+ ibm_own_fcast[["mean"]]) / 4
library(ggplot2)
autoplot(ibm.return) +
autolayer(ibm_ets_fcast, series="ETS", PI=FALSE) + autolayer(ibm_arima_fcast, series="ARIMA", PI=FALSE) + autolayer(ibm_hw_fcast, series="HW", PI=FALSE) + autolayer(ibm_own_fcast, series="own model", PI=FALSE) + autolayer(combination.ibm, series="Combination") + xlab("Year") + ylab("price") + ggtitle("IBM")
c(ETS = accuracy(ibm_ets_fcast, ibm.return)["Test set","MAPE"], ARIMA = accuracy(ibm_arima_fcast, ibm.return)["Test set","MAPE"], HW = accuracy(ibm_hw_fcast, ibm.return)["Test set","MAPE"],   Combination =  accuracy(combination.ibm, ibm.return)["Test set","MAPE"])
#ccf(nyse_return,ibm_return,ylab="Cross-Correlation Function", main = "NYSE and IBM CCF")
install.packages("vars")
library(vars)
VARselect(y)
install.packages("vars")
#ccf(nyse_return,ibm_return,ylab="Cross-Correlation Function", main = "NYSE and IBM CCF")
library(vars)
y <- cbind(nyse_return, ibm_return)
y_ts <- data.frame(y)
VARselect(y_ts[-1,], lag.max = 10)
y_model1=VAR(y_ts[-1,], p = 1)
summary(y_model1)
acf(residuals(y_model1)[,1])
pacf(residuals(y_model1)[,1])
acf(residuals(y_model)[,2])
#ccf(nyse_return,ibm_return,ylab="Cross-Correlation Function", main = "NYSE and IBM CCF")
library(vars)
y <- cbind(nyse_return, ibm_return)
y_ts <- data.frame(y)
VARselect(y_ts[-1,], lag.max = 10)
y_model1=VAR(y_ts[-1,], p = 1)
summary(y_model1)
acf(residuals(y_model1)[,1])
pacf(residuals(y_model1)[,1])
acf(residuals(y_model1)[,2])
pacf(residuals(y_model1)[,2])
plot(irf(y_model1))
knitr::opts_chunk$set(echo = TRUE)
#h <- length(nyse.return) - length(nyse_return)
ibm_return <- window(ibm.return, end=c(2018,12))
# Generate ARIMA model automatically
IBM_arima <- auto.arima(ibm_r)
quantmod)
library(quantmod)
library(timeSeries)
library(forecast)
library(ggplot2)
library(vars)
library(lmtest)
library(timeSeries)
library(rugarch)
# Generate ARIMA model automatically
IBM_arima <- auto.arima(ibm_r)
# Generate ARIMA model automatically
IBM_arima <- auto.arima(ibm_return)
# Generate ets model
IBM_ets <- ets(ibm_return)
# Generate Holt-Winters model
IBM_hw <- hw(ibm_return)
# Forecast every model 12 steps ahead
ibm_arima_fcast <- IBM_arima %>% forecast(12)
ibm_ets_fcast <- IBM_ets %>% forecast(12)
ibm_hw_fcast <- IBM_hw %>% forecast(12)
ibm_own_fcast <- ibm_mod_full$fitted %>% forecast(12)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(quantmod)
library(timeSeries)
library(forecast)
library(ggplot2)
library(vars)
library(lmtest)
library(timeSeries)
library(rugarch)
#use getSymbols function to get NYSE and Accenture daily stock
nyse <- getSymbols(Symbols = "^NYA", auto.assign = FALSE, from = "1970-01-01", to = "2019-12-31")[,6]
ibm <- getSymbols(Symbols = "IBM", auto.assign = FALSE, from = "1970-01-01", to = "2019-12-31")[,6]
tnx <- getSymbols(Symbols = "^TNX", auto.assign = FALSE, from = "1970-01-01", to = "2018-12-31")[,6]
#convert to weekly data since we want to analyze weekly return stock data
nyse <- to.monthly(x = nyse)[,4]
tnx <- to.monthly(x = tnx)[,4]
ibm <- to.monthly(x = ibm)[,4]
#convert again to time series
nyse <- ts(nyse, start = 1970, frequency = 12)
tnx <- ts(tnx, start = 1970, frequency = 12)
ibm <- ts(ibm, start = 1970, frequency = 12)
#Testing window (Until 2019)
#calculate difference of each time series
nyse_r <- (diff(nyse) / stats::lag(nyse, -1)) * 100
ibm_r <- (diff(ibm) / stats::lag(ibm, -1)) * 100
#Training window
nyse_return <- window(nyse.return, end=c(2018,12))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(quantmod)
library(timeSeries)
library(forecast)
library(ggplot2)
library(vars)
library(lmtest)
library(timeSeries)
library(rugarch)
#use getSymbols function to get NYSE and Accenture daily stock
nyse <- getSymbols(Symbols = "^NYA", auto.assign = FALSE, from = "1970-01-01", to = "2019-12-31")[,6]
ibm <- getSymbols(Symbols = "IBM", auto.assign = FALSE, from = "1970-01-01", to = "2019-12-31")[,6]
tnx <- getSymbols(Symbols = "^TNX", auto.assign = FALSE, from = "1970-01-01", to = "2018-12-31")[,6]
#convert to weekly data since we want to analyze weekly return stock data
nyse <- to.monthly(x = nyse)[,4]
tnx <- to.monthly(x = tnx)[,4]
ibm <- to.monthly(x = ibm)[,4]
#convert again to time series
nyse <- ts(nyse, start = 1970, frequency = 12)
tnx <- ts(tnx, start = 1970, frequency = 12)
ibm <- ts(ibm, start = 1970, frequency = 12)
#Testing window (Until 2019)
#calculate difference of each time series
nyse_r <- (diff(nyse) / stats::lag(nyse, -1)) * 100
ibm_r <- (diff(ibm) / stats::lag(ibm, -1)) * 100
#Training window
nyse_return <- window(nyse_r, end=c(2018,12))
#h <- length(nyse.return) - length(nyse_return)
ibm_return <- window(ibm_r, end=c(2018,12))
#h <- length(ibm.return) - length(ibm_return)
tsdisplay(nyse_return, main = "NYSE Stock Monthly Return")
tsdisplay(ibm_return, main = "IBM Stock Monthly Return")
plot(nyse_r, main = "NYSE vs. IBM Stock Monthly Return", ylab = "Return", col = "red",
type = "l", ylim = c(-40,30))
legend(x = "topleft", legend = c("NYSE","IBM"), col = c("red","blue"), lty=1:1, cex=0.8)
lines(ibm_r, col = "blue")
#construct time component
t <- seq(1970 + 1/12, 2018, length = length(nyse_r))
ibm_mod_trend <- lm(ibm_r ~ I(sin(4*pi*t)) + I(cos(4*pi*t)))
summary(ibm_mod_trend)
plot(ibm_r, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Periodic Trend","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_trend$fitted.values ~ t, col = "dark green")
ibm_mod_seasonal <- tslm(ibm_r ~ season)
summary(ibm_mod_seasonal)
plot(ibm_r, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Seasonal Fit","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_seasonal$fitted.values ~ t, col = "dark green")
ibm_dec <- decompose(ibm_r)
autoplot(ibm_dec)
auto.arima(ibm_dec$random)
season_m <- seasonaldummy(ibm_r)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
#construct time component
t <- seq(1970 + 1/12, 2018, length = length(nyse_r))
ibm_mod_trend <- lm(ibm_r ~ I(sin(4*pi*t)) + I(cos(4*pi*t)))
summary(ibm_mod_trend)
plot(nyse_r, main = "NYSE vs. IBM Stock Monthly Return", ylab = "Return", col = "red",
type = "l", ylim = c(-40,30))
legend(x = "topleft", legend = c("NYSE","IBM"), col = c("red","blue"), lty=1:1, cex=0.8)
lines(ibm_r, col = "blue")
tsdisplay(ibm_return, main = "IBM Stock Monthly Return")
tsdisplay(nyse_return, main = "NYSE Stock Monthly Return")
#construct time component
t <- seq(1970 + 1/12, 2018, length = length(nyse_r))
ibm_mod_trend <- lm(ibm_r ~ I(sin(4*pi*t)) + I(cos(4*pi*t)))
summary(ibm_mod_trend)
plot(ibm_r, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Periodic Trend","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_trend$fitted.values ~ t, col = "dark green")
ibm_mod_seasonal <- tslm(ibm_r ~ season)
summary(ibm_mod_seasonal)
plot(ibm_r, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Seasonal Fit","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_seasonal$fitted.values ~ t, col = "dark green")
ibm_dec <- decompose(ibm_r)
autoplot(ibm_dec)
auto.arima(ibm_dec$random)
season_m <- seasonaldummy(ibm_r)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
season_m <- seasonaldummy(ibm_r)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
season_m <- seasonaldummy(ibm_r)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
plot(nyse_return, main = "NYSE vs. IBM Stock Monthly Return", ylab = "Return", col = "red",
type = "l", ylim = c(-40,30))
legend(x = "topleft", legend = c("NYSE","IBM"), col = c("red","blue"), lty=1:1, cex=0.8)
lines(ibm_r, col = "blue")
#construct time component
t <- seq(1970 + 1/12, 2018, length = length(nyse_return))
ibm_mod_trend <- lm(ibm_return ~ I(sin(4*pi*t)) + I(cos(4*pi*t)))
summary(ibm_mod_trend)
plot(ibm_return, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Periodic Trend","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_trend$fitted.values ~ t, col = "dark green")
ibm_mod_seasonal <- tslm(ibm_return ~ season)
summary(ibm_mod_seasonal)
plot(ibm_return, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Seasonal Fit","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_seasonal$fitted.values ~ t, col = "dark green")
ibm_dec <- decompose(ibm_return)
autoplot(ibm_dec)
auto.arima(ibm_dec$random)
season_m <- seasonaldummy(ibm_r)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
season_m <- seasonaldummy(ibm_return)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
summary(ibm_mod_full)
plot(ibm_return, main = "IBM Return & Full Model Fit", xlab = "Year", ylab = "IBM Return", col = "blue")
legend(x = "topleft", legend = c("Full Fit","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_full$fit, col = "dark green")
nyse_mod_full <- Arima(nyse_return, order=c(2,0,2), seasonal=list(order=c(1,0,1), period =12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
summary(nyse_mod_full)
plot(nyse_return, main = "NYSE Return & Full Model Fit", xlab = "Year", ylab = "NYSE Return", col = "red")
legend(x = "topleft", legend = c("Full Fit","NYSE"), col = c("dark green","red"), lty=1:1, cex=0.8)
lines(nyse_mod_full$fit, col = "dark green")
#IBM return
plot(ibm_mod_full$fitted, ibm_mod_full$residuals, pch=20, col="blue", lwd=1, main = "Residuals vs Fitted Values (IBM)", xlab="Fitted Values", ylab="Residuals")
abline(h=0, lwd=2, col="black")
#NYSE return
plot(nyse_mod_full$fitted, nyse_mod_full$residuals, pch=20, col="red", lwd=1, main = "Residuals vs Fitted Values (NYSE)", xlab="Fitted Values", ylab="Residuals")
abline(h=0, lwd=2, col="black")
tsdisplay(ibm_mod_full$residuals, main = "IBM Residuals")
Box.test(ibm_mod_full$residuals, type = "Ljung-Box")
tsdisplay(nyse_mod_full$residuals, main = "NYSE Residuals")
Box.test(nyse_mod_full$residuals, type = "Ljung-Box")
plot(efp(ibm_mod_full$residuals ~ 1))
plot(efp(nyse_mod_full$residuals ~ 1))
plot(recresid(ibm_mod_full$residuals ~ 1), main = "Recursive Residuals (IBM)", ylab = "Recres",
pch = 16, type = "l", col = "blue")
plot(recresid(nyse_mod_full$residuals ~ 1), main = "Recursive Residuals (NYSE)", ylab = "Recres",
pch = 16, type = "l", col = "red")
summary(ibm_mod_full)
accuracy(ibm_mod_full)
summary(nyse_mod_full)
accuracy(nyse_mod_full)
plot(forecast(ibm_mod_full$fitted, h=12), main = "12-Step Forecast of IBM Return", ylab = "IBM Return", xlab = "Year") # Overall looking at a glance
plot(forecast(ibm_mod_full$fitted , h=12), xlim=c(2018, 2020), main = "12-Step Forecast of IBM Return", ylab = "IBM Return", xlab = "Year")
plot(forecast(nyse_mod_full$fitted, h=12), main = "12-Step Forecast of NYSE Return", ylab = "NYSE Return", xlab = "Year") # Overall looking at a glance
plot(forecast(nyse_mod_full$fitted, h=12), xlim=c(2018, 2020), main = "12-Step Forecast of NYSE Return", ylab = "NYSE Return", xlab = "Year") # A closer look
# Generate ARIMA model automatically
IBM_arima <- auto.arima(ibm_return)
# Generate ets model
IBM_ets <- ets(ibm_return)
# Generate Holt-Winters model
IBM_hw <- hw(ibm_return)
# Forecast every model 12 steps ahead
ibm_arima_fcast <- IBM_arima %>% forecast(12)
ibm_ets_fcast <- IBM_ets %>% forecast(12)
ibm_hw_fcast <- IBM_hw %>% forecast(12)
ibm_own_fcast <- ibm_mod_full$fitted %>% forecast(12)
accuracy(ibm_arima_fcast, ibm_r)
accuracy(ibm_ets_fcast, ibm_r)
accuracy(ibm_hw_fcast, ibm_r)
accuracy(ibm_own_fcast, ibm_r)
# Generate ARIMA model automatically
NYSE_arima <- auto.arima(nyse_r)
# Generate ETS model
NYSE_ets <- ets(nyse_r)
# Generate Holt-Winters model
NYSE_hw <- hw(nyse_r)
# Forecast every model 12 steps ahead
nyse_arima_fcast <- NYSE_arima %>% forecast(12)
nyse_ets_fcast <- NYSE_ets %>% forecast(12)
nyse_hw_fcast <- NYSE_hw %>% forecast(12)
nyse_own_fcast <- nyse_mod_full$fitted %>% forecast(12)
# Output a table of MAPE values and the respective model
accuracy(nyse_arima_fcast, nyse_r)
# Generate ARIMA model automatically
NYSE_arima <- auto.arima(nyse_return)
# Generate ETS model
NYSE_ets <- ets(nyse_return)
# Generate Holt-Winters model
NYSE_hw <- hw(nyse_return)
# Forecast every model 12 steps ahead
nyse_arima_fcast <- NYSE_arima %>% forecast(12)
nyse_ets_fcast <- NYSE_ets %>% forecast(12)
nyse_hw_fcast <- NYSE_hw %>% forecast(12)
nyse_own_fcast <- nyse_mod_full$fitted %>% forecast(12)
# Output a table of MAPE values and the respective model
accuracy(nyse_arima_fcast, nyse_r)
accuracy(nyse_ets_fcast, nyse_r)
accuracy(nyse_hw_fcast, nyse_r)
accuracy(nyse_own_fcast, nyse_r)
combination.nyse <- (nyse_ets_fcast[["mean"]]+ nyse_arima_fcast[["mean"]]+ nyse_hw_fcast[["mean"]]+ nyse_own_fcast[["mean"]]) / 4
autoplot(nyse_r) +
autolayer(nyse_ets_fcast, series="ETS", PI=FALSE) + autolayer(nyse_arima_fcast, series="ARIMA", PI=FALSE) + autolayer(nyse_hw_fcast, series="HW", PI=FALSE) + autolayer(nyse_own_fcast, series="own model", PI=FALSE) + autolayer(combination.nyse, series="Combination") + xlab("Year") + ylab("price") + ggtitle("NYSE")
c(ETS = accuracy(nyse_ets_fcast, nyse_r)["Test set","MAPE"], ARIMA = accuracy(nyse_arima_fcast, nyse_r)["Test set","MAPE"], HW = accuracy(nyse_hw_fcast, nyse_r)["Test set","MAPE"],   Combination =  accuracy(combination.nyse,  nyse_r)["Test set","MAPE"])
combination.ibm <- (ibm_ets_fcast[["mean"]]+ ibm_arima_fcast[["mean"]]+ ibm_hw_fcast[["mean"]]+ ibm_own_fcast[["mean"]]) / 4
library(ggplot2)
autoplot(ibm_r) +
autolayer(ibm_ets_fcast, series="ETS", PI=FALSE) + autolayer(ibm_arima_fcast, series="ARIMA", PI=FALSE) + autolayer(ibm_hw_fcast, series="HW", PI=FALSE) + autolayer(ibm_own_fcast, series="own model", PI=FALSE) + autolayer(combination.ibm, series="Combination") + xlab("Year") + ylab("price") + ggtitle("IBM")
c(ETS = accuracy(ibm_ets_fcast, ibm_r)["Test set","MAPE"], ARIMA = accuracy(ibm_arima_fcast, ibm_r)["Test set","MAPE"], HW = accuracy(ibm_hw_fcast, ibm_r)["Test set","MAPE"],   Combination =  accuracy(combination.ibm, ibm_r)["Test set","MAPE"])
y <- cbind(nyse_r, ibm_r)
y_ts <- data.frame(y)
VARselect(y_ts[-1,], lag.max = 10)
y_model1=VAR(y_ts[-1,], p = 1)
summary(y_model1)
plot(irf(y_model1))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(quantmod)
library(timeSeries)
library(forecast)
library(ggplot2)
library(vars)
library(lmtest)
library(timeSeries)
library(rugarch)
#use getSymbols function to get NYSE and Accenture daily stock
nyse <- getSymbols(Symbols = "^NYA", auto.assign = FALSE, from = "1970-01-01", to = "2019-12-31")[,6]
ibm <- getSymbols(Symbols = "IBM", auto.assign = FALSE, from = "1970-01-01", to = "2019-12-31")[,6]
tnx <- getSymbols(Symbols = "^TNX", auto.assign = FALSE, from = "1970-01-01", to = "2018-12-31")[,6]
#convert to weekly data since we want to analyze weekly return stock data
nyse <- to.monthly(x = nyse)[,4]
tnx <- to.monthly(x = tnx)[,4]
ibm <- to.monthly(x = ibm)[,4]
#convert again to time series
nyse <- ts(nyse, start = 1970, frequency = 12)
tnx <- ts(tnx, start = 1970, frequency = 12)
ibm <- ts(ibm, start = 1970, frequency = 12)
#Testing window (Until 2019)
#calculate difference of each time series
nyse_r <- (diff(nyse) / stats::lag(nyse, -1)) * 100
ibm_r <- (diff(ibm) / stats::lag(ibm, -1)) * 100
#Training window
nyse_return <- window(nyse_r, end=c(2018,12))
#h <- length(nyse.return) - length(nyse_return)
ibm_return <- window(ibm_r, end=c(2018,12))
#h <- length(ibm.return) - length(ibm_return)
tsdisplay(nyse_return, main = "NYSE Stock Monthly Return")
tsdisplay(ibm_return, main = "IBM Stock Monthly Return")
plot(nyse_return, main = "NYSE vs. IBM Stock Monthly Return", ylab = "Return", col = "red",
type = "l", ylim = c(-40,30))
legend(x = "topleft", legend = c("NYSE","IBM"), col = c("red","blue"), lty=1:1, cex=0.8)
lines(ibm_r, col = "blue")
#construct time component
t <- seq(1970 + 1/12, 2018, length = length(nyse_return))
ibm_mod_trend <- lm(ibm_return ~ I(sin(4*pi*t)) + I(cos(4*pi*t)))
summary(ibm_mod_trend)
plot(ibm_return, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Periodic Trend","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_trend$fitted.values ~ t, col = "dark green")
ibm_mod_seasonal <- tslm(ibm_return ~ season)
summary(ibm_mod_seasonal)
plot(ibm_return, main = "IBM Return", col = "blue", ylab = "Return")
legend(x = "topleft", legend = c("Seasonal Fit","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_seasonal$fitted.values ~ t, col = "dark green")
ibm_dec <- decompose(ibm_return)
autoplot(ibm_dec)
auto.arima(ibm_dec$random)
season_m <- seasonaldummy(ibm_return)
ibm_mod_full <- Arima(ibm_return, order = c(5,0,0), seasonal=list(order=c(1,0,1), period = 12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
summary(ibm_mod_full)
plot(ibm_return, main = "IBM Return & Full Model Fit", xlab = "Year", ylab = "IBM Return", col = "blue")
legend(x = "topleft", legend = c("Full Fit","IBM"), col = c("dark green","blue"), lty=1:1, cex=0.8)
lines(ibm_mod_full$fit, col = "dark green")
nyse_mod_full <- Arima(nyse_return, order=c(2,0,2), seasonal=list(order=c(1,0,1), period =12), xreg = cbind(t, sin(4*pi*t), cos(4*pi*t), season_m))
summary(nyse_mod_full)
plot(nyse_return, main = "NYSE Return & Full Model Fit", xlab = "Year", ylab = "NYSE Return", col = "red")
legend(x = "topleft", legend = c("Full Fit","NYSE"), col = c("dark green","red"), lty=1:1, cex=0.8)
lines(nyse_mod_full$fit, col = "dark green")
#IBM return
plot(ibm_mod_full$fitted, ibm_mod_full$residuals, pch=20, col="blue", lwd=1, main = "Residuals vs Fitted Values (IBM)", xlab="Fitted Values", ylab="Residuals")
abline(h=0, lwd=2, col="black")
#NYSE return
plot(nyse_mod_full$fitted, nyse_mod_full$residuals, pch=20, col="red", lwd=1, main = "Residuals vs Fitted Values (NYSE)", xlab="Fitted Values", ylab="Residuals")
abline(h=0, lwd=2, col="black")
tsdisplay(ibm_mod_full$residuals, main = "IBM Residuals")
Box.test(ibm_mod_full$residuals, type = "Ljung-Box")
tsdisplay(nyse_mod_full$residuals, main = "NYSE Residuals")
Box.test(nyse_mod_full$residuals, type = "Ljung-Box")
plot(efp(ibm_mod_full$residuals ~ 1))
plot(efp(nyse_mod_full$residuals ~ 1))
plot(recresid(ibm_mod_full$residuals ~ 1), main = "Recursive Residuals (IBM)", ylab = "Recres",
pch = 16, type = "l", col = "blue")
plot(recresid(nyse_mod_full$residuals ~ 1), main = "Recursive Residuals (NYSE)", ylab = "Recres",
pch = 16, type = "l", col = "red")
summary(ibm_mod_full)
accuracy(ibm_mod_full)
summary(nyse_mod_full)
accuracy(nyse_mod_full)
plot(forecast(ibm_mod_full$fitted, h=12), main = "12-Step Forecast of IBM Return", ylab = "IBM Return", xlab = "Year") # Overall looking at a glance
plot(forecast(ibm_mod_full$fitted , h=12), xlim=c(2018, 2020), main = "12-Step Forecast of IBM Return", ylab = "IBM Return", xlab = "Year")
plot(forecast(nyse_mod_full$fitted, h=12), main = "12-Step Forecast of NYSE Return", ylab = "NYSE Return", xlab = "Year") # Overall looking at a glance
plot(forecast(nyse_mod_full$fitted, h=12), xlim=c(2018, 2020), main = "12-Step Forecast of NYSE Return", ylab = "NYSE Return", xlab = "Year") # A closer look
# Generate ARIMA model automatically
IBM_arima <- auto.arima(ibm_return)
# Generate ets model
IBM_ets <- ets(ibm_return)
# Generate Holt-Winters model
IBM_hw <- hw(ibm_return)
# Forecast every model 12 steps ahead
ibm_arima_fcast <- IBM_arima %>% forecast(12)
ibm_ets_fcast <- IBM_ets %>% forecast(12)
ibm_hw_fcast <- IBM_hw %>% forecast(12)
ibm_own_fcast <- ibm_mod_full$fitted %>% forecast(12)
accuracy(ibm_arima_fcast, ibm_r)
accuracy(ibm_ets_fcast, ibm_r)
accuracy(ibm_hw_fcast, ibm_r)
accuracy(ibm_own_fcast, ibm_r)
# Generate ARIMA model automatically
NYSE_arima <- auto.arima(nyse_return)
# Generate ETS model
NYSE_ets <- ets(nyse_return)
# Generate Holt-Winters model
NYSE_hw <- hw(nyse_return)
# Forecast every model 12 steps ahead
nyse_arima_fcast <- NYSE_arima %>% forecast(12)
nyse_ets_fcast <- NYSE_ets %>% forecast(12)
nyse_hw_fcast <- NYSE_hw %>% forecast(12)
nyse_own_fcast <- nyse_mod_full$fitted %>% forecast(12)
# Output a table of MAPE values and the respective model
accuracy(nyse_arima_fcast, nyse_r)
accuracy(nyse_ets_fcast, nyse_r)
accuracy(nyse_hw_fcast, nyse_r)
accuracy(nyse_own_fcast, nyse_r)
combination.nyse <- (nyse_ets_fcast[["mean"]]+ nyse_arima_fcast[["mean"]]+ nyse_hw_fcast[["mean"]]+ nyse_own_fcast[["mean"]]) / 4
autoplot(nyse_r) +
autolayer(nyse_ets_fcast, series="ETS", PI=FALSE) + autolayer(nyse_arima_fcast, series="ARIMA", PI=FALSE) + autolayer(nyse_hw_fcast, series="HW", PI=FALSE) + autolayer(nyse_own_fcast, series="own model", PI=FALSE) + autolayer(combination.nyse, series="Combination") + xlab("Year") + ylab("price") + ggtitle("NYSE")
c(ETS = accuracy(nyse_ets_fcast, nyse_r)["Test set","MAPE"], ARIMA = accuracy(nyse_arima_fcast, nyse_r)["Test set","MAPE"], HW = accuracy(nyse_hw_fcast, nyse_r)["Test set","MAPE"],   Combination =  accuracy(combination.nyse,  nyse_r)["Test set","MAPE"])
combination.ibm <- (ibm_ets_fcast[["mean"]]+ ibm_arima_fcast[["mean"]]+ ibm_hw_fcast[["mean"]]+ ibm_own_fcast[["mean"]]) / 4
autoplot(ibm_r) +
autolayer(ibm_ets_fcast, series="ETS", PI=FALSE) + autolayer(ibm_arima_fcast, series="ARIMA", PI=FALSE) + autolayer(ibm_hw_fcast, series="HW", PI=FALSE) + autolayer(ibm_own_fcast, series="own model", PI=FALSE) + autolayer(combination.ibm, series="Combination") + xlab("Year") + ylab("price") + ggtitle("IBM")
c(ETS = accuracy(ibm_ets_fcast, ibm_r)["Test set","MAPE"], ARIMA = accuracy(ibm_arima_fcast, ibm_r)["Test set","MAPE"], HW = accuracy(ibm_hw_fcast, ibm_r)["Test set","MAPE"],   Combination =  accuracy(combination.ibm, ibm_r)["Test set","MAPE"])
y <- cbind(nyse_r, ibm_r)
y_ts <- data.frame(y)
VARselect(y_ts[-1,], lag.max = 10)
y_model1=VAR(y_ts[-1,], p = 1)
summary(y_model1)
irf(y_model1)
plot(irf(y_model1, n.ahead = 12))
knitr::opts_chunk$set(echo = TRUE)
#H0: IBM does not cause NYSE (do not reject)
grangertest(nyse_r ~ ibm_r, order = 1)
library(quantmod)
library(timeSeries)
library(forecast)
library(ggplot2)
library(vars)
library(lmtest)
library(timeSeries)
library(rugarch)
#H0: IBM does not cause NYSE (do not reject)
grangertest(nyse_r ~ ibm_r, order = 1)
#H0: NYSE does not cause IBM (do not reject)
grangertest(ibm_r ~ nyse_r, order = 1)
var.predict <- predict(object=y_model1, n.ahead=12)
plot(var.predict)
plot(forecast(y, h=12))
#load favorite model residuals
nyse_resid <- NYSE_arima$residuals
# load specification for garch model
nyse_spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),mean.model = nyse_mod_full,
distribution.model = "sstd")
# Fit garch model for nyse data
nyse_garch <- ugarchfit(spec = nyse_spec, data = nyse_return)
# Forecast garch model
nyse_garch_fcast <- ugarchforecast(nyse_garch, n.ahead = 12, n.roll = 0, out.sample = 0)
plot(nyse_garch_fcast, which = 3)
plot(irf(y_model1, n.ahead = 12), which = 3)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(timeSeries)
library(forecast)
library(ggplot2)
library(vars)
library(lmtest)
library(timeSeries)
library(rugarch)
plot(forecast(ibm_mod_full, h=12))
plot(forecast(ibm_mod_full$fitted, h=12), which = 3)
plot(forecast(ibm_mod_full$fitted, h=12))
par(mfrow=c(1,2))
plot(forecast(ibm_mod_full$fitted, h=12))
par(mfrow=c(2,1))
plot(forecast(ibm_mod_full$fitted, h=12))
